<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">   
		
	<!-- 配置数据源 -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://localhost:3306/test" />
		<property name="username" value="root" />
		<property name="password" value="" />
	</bean>
	
	<!-- 配置SqlSessionFactoryBean -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 加载MyBatis配置文件路径 -->
		<property name="configLocation" value="classpath:MyBatisConf.xml" />
	</bean>

	<!-- 使用MapperFactoryBean时，当有一个Mapper（可以理解为表对应的映射文件）就MapperFactoryBean，当mapper少数可以通过applicationContext配置文件，通过id获取。
	如果大量的mapper，需要使用mybatis-spring.jar通过的MapperScannerConfigurer组件，通过这个组件可以自动扫描指定包下的各个Mapper接口，并注册对应的MapperFactoryBean对象 -->
	
	<!--方法1:配置MapperFactoryBean
	<bean id="userMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">  
		<property name="mapperInterface" value="com.ylsk.mapper.UserMapper" />  
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />  
    </bean> -->
    
    <!--方法2:可以把扫描到的Mapper接口变成Mapper对象-->  
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
		<!--指定要扫描包： 多个包用逗号隔开  -->
		<property name="basePackage" value="com.ylsk.mapper" />   
		<!--指定sqlSessionFactory -->  
		<property name="sqlSessionFactory" ref="sqlSessionFactory"/>  
	</bean> 
</beans>